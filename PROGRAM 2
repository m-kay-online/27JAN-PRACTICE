#include <iostream>
#include <vector>
using namespace std;

template <typename T>
class Stack {
private:
    vector<T> data;

public:
    void push(T element) {
        data.push_back(element);
    }

    T pop() {
        if (data.empty()) {
            throw out_of_range("Cannot pop from an empty stack");
        }
        T element = data.back();
        data.pop_back();
        return element;
    }

    T peek() {
        if (data.empty()) {
            throw out_of_range("Cannot peek at an empty stack");
        }
        return data.back();
    }

    int size() {
        return data.size();
    }

    bool empty() {
        return data.empty();
    }
};

int main() {
    
    
    Stack<int> myStack;
    myStack.push(1);
    myStack.push(2);
    myStack.push(3);
    cout << "Stack size: " << myStack.size() << endl;
    cout << "Top element: " << myStack.peek() << endl;
    cout << "Popped element: " << myStack.pop() << endl;
    cout << "Stack size: " << myStack.size() << endl;
    cout << "Stack empty: " << boolalpha << myStack.empty() << endl;
    return 0;
}
